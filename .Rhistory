template = "[/Count %d /Title <%s> /Page %d /OUT pdfmark"
title = x$title
page = x$page
count = length(x$children)
out = sprintf(template, count, title, page)
if (any(count > 0L)) {
children = lapply(x$children, to_gs)
out = c(out, unlist(children, use.names = FALSE))
}
out
}
unlist(lapply(toc, to_gs), use.names = FALSE)
}
find_gs = function() {
gs = tools::find_gs_cmd()
# according to the doc of tools::find_gs_cmd, gs should always be a string
unname(gs)
}
gs_available = function() {
nzchar(find_gs())
}
add_outline = function(input, toc_infos, verbose) {
gs_content = gen_toc_gs(toc_infos)
# when TOC doesn't exist, gs_content will be null
if (is.null(gs_content)) return(invisible(input))
gs_file = tempfile(); on.exit(unlink(gs_file), add = TRUE)
writeLines(gs_content, con = gs_file)
if (!gs_available()) stop(
'Cannot find GhostScript executable automatically. ',
"Please pass the full path of the GhostScript executable ",
"to the environment variable 'R_GSCMD'. ",
"See ?tools::find_gs_cmd for more details."
)
output = tempfile(fileext = '.pdf'); on.exit(unlink(output), add = TRUE)
input2 = input
if (!xfun::is_ascii(input2)) {
# this is needed when input contain non-ASCII characters
input2 = tempfile(fileext = '.pdf'); on.exit(unlink(input2), add = TRUE)
file.copy(input, input2)
}
args = c('-o', output, '-sDEVICE=pdfwrite', '-dPDFSETTINGS=/prepress', input2, gs_file)
if (verbose < 2) args = c('-q', args)
gs_out = system2(find_gs(), shQuote(args))
if (gs_out == 0) {
file.copy(output, input, overwrite = TRUE)
} else {
warning('GhostScript fails to add the outlines', call. = FALSE)
}
invisible(input)
}
#' Find Google Chrome or Chromium in the system
#'
#' On Windows, this function tries to find Chrome from the registry. On macOS,
#' it returns a hard-coded path of Chrome under \file{/Applications}. On Linux,
#' it searches for \command{chromium-browser} and \command{google-chrome} from
#' the system's \var{PATH} variable.
#' @return A character string.
#' @export
find_chrome = function() {
switch(
.Platform$OS.type,
windows = {
res = tryCatch({
unlist(utils::readRegistry('ChromeHTML\\shell\\open\\command', 'HCR'))
}, error = function(e) '')
res = unlist(strsplit(res, '"'))
res = head(res[file.exists(res)], 1)
if (length(res) != 1) stop(
'Cannot find Google Chrome automatically from the Windows Registry Hive. ',
"Please pass the full path of chrome.exe to the 'browser' argument ",
"or to the environment variable 'PAGEDOWN_CHROME'."
)
res
},
unix = if (xfun::is_macos()) {
'/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
} else {
for (i in c('google-chrome', 'chromium-browser', 'chromium', 'google-chrome-stable')) {
if ((res <- Sys.which(i)) != '') break
}
if (res == '') stop('Cannot find Chromium or Google Chrome')
res
},
stop('Your platform is not supported')
)
}
proxy_args = function() {
# the order of the variables is important because the first non-empty variable is kept
val = Sys.getenv(c('https_proxy', 'HTTPS_PROXY', 'http_proxy', 'HTTP_PROXY'))
val = val[val != '']
if (length(val) == 0) return()
c(
paste0('--proxy-server=', val[1]),
paste0('--proxy-bypass-list=', paste(no_proxy_urls(), collapse = ';'))
)
}
no_proxy_urls = function() {
x = do.call(c, strsplit(Sys.getenv(c('no_proxy', 'NO_PROXY')), '[,;]'))
x = c('localhost', '127.0.0.1', x)
unique(x)
}
is_remote_protocol_ok = function(debug_port,
verbose = 0) {
url = sprintf('http://127.0.0.1:%s/json/protocol', debug_port)
# can be specify with option, for ex. for CI specificity. see #117
max_attempts = getOption("pagedown.remote.maxattempts", 20L)
sleep_time = getOption("pagedown.remote.sleeptime", 0.5)
if (verbose >= 1) message('Trying to find headless Chrome in ', max_attempts, ' attempts')
for (i in seq_len(max_attempts)) {
remote_protocol = tryCatch(suppressWarnings(jsonlite::read_json(url)), error = function(e) NULL)
if (!is.null(remote_protocol)) {
if (verbose >= 1) message('Headless Chrome found at attempt ', i)
break
}
if (i == max_attempts) stop('Cannot find headless Chrome after ', max_attempts, ' attempts')
Sys.sleep(sleep_time)
}
required_commands = list(
DOM = c('enable', 'getBoxModel', 'getDocument', 'querySelector'),
Network = c('enable'),
Page = c('addScriptToEvaluateOnNewDocument',
'captureScreenshot',
'enable',
'navigate',
'printToPDF'
),
Runtime = c('enable', 'addBinding', 'evaluate'),
Target = c('attachToTarget', 'createTarget')
)
remote_domains = sapply(remote_protocol$domains, `[[`, 'domain')
if (!all(names(required_commands) %in% remote_domains))
return(FALSE)
required_events = list(
Inspector = c('targetCrashed'),
Network = c('responseReceived'),
Page = c('loadEventFired'),
Runtime = c('bindingCalled', 'exceptionThrown')
)
remote_commands = sapply(names(required_commands), function(domain) {
sapply(
remote_protocol$domains[remote_domains %in% domain][[1]]$commands,
`[[`, 'name'
)
})
remote_events =  sapply(names(required_events), function(domain) {
sapply(
remote_protocol$domains[remote_domains %in% domain][[1]]$events,
`[[`, 'name'
)
})
if (!all(mapply(function(x, table) all(x %in% table), required_commands, remote_commands),
mapply(function(x, table) all(x %in% table), required_events, remote_events)
))
return(FALSE)
stream_pdf_available = 'transferMode' %in% sapply(
remote_protocol[['domains']][remote_domains == 'Page'][[1]][['commands']][remote_commands[['Page']] == 'printToPDF'][[1]][['parameters']],
`[[`, 'name'
)
res = TRUE
attr(res, 'stream_pdf_available') = stream_pdf_available
res
}
get_entrypoint = function(debug_port, verbose) {
version_infos = jsonlite::read_json(
sprintf('http://127.0.0.1:%s/json/version', debug_port), simplifyVector = TRUE
)
browser = version_infos$webSocketDebuggerUrl
if (length(browser) == 0) stop("Cannot find 'Browser' websocket URL. Please retry.")
if (verbose >= 1)
message('Browser version: ', version_infos$Browser)
browser
}
print_page = function(
ws, url, output, wait, verbose, token, format,
options = list(), selector, box_model, scale, outline, resolve, reject
) {
# init values
session_id = NULL
coords = NULL
toc_infos = NULL
stream_handle = NULL
con = NULL
ws$onOpen(function(event) {
# Create a new Target (tab)
ws$send(to_json(list(
id = 1, method = 'Target.createTarget',
params = list(url = 'about:blank')
)))
})
ws$onMessage(function(event) {
if (!is.null(token$error)) {
ws$close()
reject(token$error)
return()
}
if (verbose >= 2) message('Message received from headless Chrome: ', event$data)
msg = jsonlite::fromJSON(event$data)
id = msg$id
method = msg$method
if (!is.null(token$error <- msg$error$message)) {
ws$close()
reject(token$error)
return()
}
if (!is.null(id)) switch(
id,
# Command #1 received -> callback: command #2 Target.attachToTarget in flat mode
ws$send(to_json(list(
id = 2, method = 'Target.attachToTarget',
params = list(targetId = msg$result$targetId, flatten = TRUE)
))),
# Command #2 received -> store the sessionId; callback: command #3 Runtime.enable
{
session_id <<- msg$result$sessionId
ws$send(to_json(list(
id = 3, sessionId = session_id, method = 'Runtime.enable'
)))
},
# Command #3 received -> callback: command #4 Page.enable
ws$send(to_json(list(
id = 4, sessionId = session_id, method = 'Page.enable'
))),
# Command #4 received -> callback: command #5 Runtime.addBinding
ws$send(to_json(list(
id = 5, sessionId = session_id, method = "Runtime.addBinding",
params = list(name = "pagedownListener")
))),
# Command #5 received -> callback: command #6 Network.Enable
ws$send(to_json(list(
id = 6, sessionId = session_id, method  = 'Network.enable'
))),
# Command #6 received -> callback: command #7 Page.addScriptToEvaluateOnNewDocument
ws$send(to_json(list(
id = 7, sessionId = session_id, method = "Page.addScriptToEvaluateOnNewDocument",
params = list(source = paste0(readLines(pkg_resource('js', 'chrome_print.js')), collapse = ""))
))),
# Command #7 received -> callback: command #8 Page.Navigate
ws$send(to_json(list(
id = 8, sessionId = session_id, method= 'Page.navigate',
params = list(url = url)
))),
{
# Command #8 received - check if there is an error when navigating to url
if(!is.null(token$error <- msg$result$errorText)) {
reject(token$error)
}
},
{
# Command #9 received - Test if the html document uses the paged.js polyfill
# if not, call the binding when HTMLWidgets, MathJax and fonts are ready
# (see inst/resources/js/chrome_print.js)
if (!isTRUE(msg$result$result$value)) {
ws$send(to_json(list(
id = 10, sessionId = session_id, method = "Runtime.evaluate",
params = list(expression = "pagedownReady.then(() => {pagedownListener('{\"pagedjs\":false}');})")
)))
}
},
# Command #10 received - No callback
NULL,
# Command #11 received -> callback: command #12 DOM.getDocument
ws$send(to_json(list(id = 12, sessionId = session_id, method = "DOM.getDocument"))),
# Command #12 received -> callback: command #13 DOM.querySelector
ws$send(to_json(list(
id = 13, sessionId = session_id, method = "DOM.querySelector",
params = list(nodeId = msg$result$root$nodeId, selector = selector)
))),
{
# Command 13 received -> callback: command #14 DOM.getBoxModel
if (msg$result$nodeId == 0) {
token$error <- 'No element in the HTML page corresponds to the `selector` value.'
reject(token$error)
} else {
ws$send(to_json(list(
id = 14, sessionId = session_id, method = "DOM.getBoxModel",
params = list(nodeId = msg$result$nodeId)
)))
}
},
{
# Command 14 received -> callback: command #15 Emulation.setDeviceMetricsOverride
coords <<- msg$result$model[[box_model]]
device_metrics = list(
width = ceiling(coords[5]),
height = ceiling(coords[6]),
deviceScaleFactor = 1,
mobile = FALSE
)
ws$send(to_json(list(
id = 15, sessionId = session_id, method = 'Emulation.setDeviceMetricsOverride',
params = device_metrics
)))
},
{
# Command #15 received -> callback: command #16 Page.captureScreenshot
opts = as.list(options)
origin = as.list(coords[1:2])
names(origin) = c('x', 'y')
dims = as.list(coords[5:6] - coords[1:2])
names(dims) = c('width', 'height')
clip = c(origin, dims, list(scale = scale))
opts = merge_list(list(clip = clip), opts)
if (verbose >= 1) message(
'Screenshot captured with the following value for the `options` parameter:\n',
paste0(deparse(opts), collapse = '\n ')
)
opts$format = format
ws$send(to_json(list(
id = 16, sessionId = session_id, method = 'Page.captureScreenshot',
params = opts
)))
},
{
# Command #16 received (printToPDF or captureScreenshot)
# if data are received -> callback: save to file & close Chrome
# if a stream handle is received -> callback: command #17 IO.read
if (is.null(stream_handle <<- msg$result$stream)) {
writeBin(jsonlite::base64_dec(msg$result$data), output)
if (!xfun::isFALSE(outline) && length(toc_infos)) add_outline(output, toc_infos, verbose)
resolve(output)
token$done = TRUE
} else {
if (verbose >= 1) message('Receiving PDF from a stream')
# open a connection
con <<- file(output, 'wb')
# read the first chunk of the stream
ws$send(to_json(list(
id = 17, sessionId = session_id, method = 'IO.read',
params = list(handle = stream_handle)
)))
}
},
{
# Command #17 received
# if there is another chunk to read -> callback: IO.read
# if EOF -> callback: command #18 IO.close
if (verbose >= 1) message('    stream chunk received')
if (isTRUE(msg$result$base64Encoded)) {
writeBin(jsonlite::base64_dec(msg$result$data), con)
} else {
writeBin(msg$result$data, con)
}
if (isTRUE(msg$result$eof)) {
if (verbose >= 1) message(
'No more stream chunk to read\n    closing stream'
)
close(con)
ws$send(to_json(list(
id = 18, sessionId = session_id, method = 'IO.close',
params = list(handle = stream_handle)
)))
} else {
# read another chunk
ws$send(to_json(list(
id = 17, sessionId = session_id, method = 'IO.read',
params = list(handle = stream_handle)
)))
}
},
{
# Command #18 received -> callback: add outline & close Chrome
if (!xfun::isFALSE(outline) && length(toc_infos)) add_outline(output, toc_infos, verbose)
resolve(output)
token$done = TRUE
}
)
if (!is.null(method)) {
if (method == "Network.responseReceived") {
status = as.numeric(msg$params$response$status)
if (status >= 400) {
token$error = sprintf(
'Failed to open %s (HTTP status code: %s)', msg$params$response$url, status
)
reject(token$error)
}
}
if (method == 'Inspector.targetCrashed') {
token$error = paste(
'Chrome crashed.',
'This may be caused by insufficient resources.',
'Please, try to add "--disable-dev-shm-usage" to the `extra_args` argument.'
)
reject(token$error)
}
if (method == 'Runtime.exceptionThrown') {
warning(
'A runtime exception has occured in Chrome\n',
'  Runtime exception message:\n    ',
msg$params$exceptionDetails$exception$description,
call. = FALSE, immediate. = TRUE
)
}
if (method == "Page.loadEventFired") {
ws$send(to_json(list(
id = 9, sessionId = session_id, method = 'Runtime.evaluate',
params = list(expression = "!!window.PagedPolyfill")
)))
}
if (method == "Runtime.bindingCalled") {
Sys.sleep(wait)
opts = as.list(options)
payload = jsonlite::fromJSON(msg$params$payload, simplifyVector = FALSE)
toc_infos <<- payload$tocInfos
if (verbose >= 1 && payload$pagedjs) {
message("Rendered ", payload$pages, " pages in ", payload$elapsedtime, " milliseconds.")
}
if (format == 'pdf') {
opts = merge_list(list(printBackground = TRUE, preferCSSPageSize = TRUE), opts)
ws$send(to_json(list(
id = 16, sessionId = session_id, params = opts, method = 'Page.printToPDF'
)))
} else {
ws$send(to_json(list(id = 11, sessionId = session_id, method = "DOM.enable")))
}
}
}
})
ws$connect()
}
© 2021 GitHub, Inc.
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
remotes::install_github('rstudio/pagedown')
remotes::install_github('rstudio/pagedown', force = TRUE)
pagedown::chrome_print("https://github.com/fplmelo/site_proj_sus/forest_people_intro.html", verbose = 2)
pagedown::chrome_print("https://github.com/fplmelo/site_proj_sus/forest_people_intro.html", verbose = 1)
pagedown::chrome_print("forest_people_intro.html",output="forest_people_intro.pdf")
pagedown::chrome_print("forest_people_intro.html",output="forest_people_intro.pdf", verbose = 2)
pagedown::chrome_print("forest_people_intro.html",output="forest_people_intro.pdf", verbose = 1)
run servr::daemon_stop
run servr::daemon_stop(3)
pagedown::chrome_print("forest_people_intro.html", format = "pdf", verbose = 1)
pagedown::chrome_print("forest_people_intro.html", format = "pdf", verbose = 2)
pagedown::chrome_print("forest_people_intro.html", format = "pdf", verbose = 2)
pagedown::chrome_print("forest_people_intro.html", format = "pdf", verbose = 1)
update.packages()
pagedown::chrome_print('forest_people_intro.html')
remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
pagedown::chrome_print('forest_people_intro.html',browser="google-chrome-stable")
remotes::install_github("jhelvy/xaringanBuilder")
library(xaringanBuilder)
pagedown::chrome_print('forest_people_intro.html',browser="google-chrome-stable")
bluid_pdf("forest_people_intro.html")
build_pdf("forest_people_intro.html")
build_pdf("forest_people_intro.Rmd")
build_pdf("forest_people_intro.Rmd", complex_slides = TRUE)
build_pdf("forest_people_intro.html", complex_slides = TRUE)
build_pdf("forest_people_intro.html", complex_slides = TRUE)
build_pdf("forest_people_intro.html")
build_pptx("forest_people_intro.html")
install.packages('officer')
build_pptx("forest_people_intro.html")
build_pptx("forest_people_intro.Rmd")
library(usethis)
build_pptx("forest_people_intro.Rmd")
build_pdf("forest_people_intro.html")
build_pdf("forest_people_intro.html")
build_pdf("forest_people_intro.html")
build_pdf("forest_people_intro.html")
build_pdf("forest_people_intro.html")
build_pdf("forest_people_intro.Rmd")
build_pdf("forest_people_intro.html", complex_slides = TRUE)
pagedown::chrome_print('forest_people_intro.html',browser="google-chrome-stable")
pagedown::chrome_print('forest_people_intro.html',browser="google-chrome-stable")
pagedown::chrome_print('forest_people_intro.html',browser="google-chrome-stable")
pagedown::chrome_print('forest_people_intro.html',browser="google-chrome-stable")
build_png("forest_people_intro.html.pdf", slides = "all")
build_png("forest_people_intro.html.pdf")
build_png("forest_people_intro.html.html")
build_png("forest_people_intro.html.html")
pagedown::chrome_print('forest_people_intro.html')
pagedown::chrome_print('forest_people_intro.html')
pagedown::chrome_print('forest_people_intro.html')
pagedown::chrome_print('forest_people_intro.html')
pagedown::chrome_print('forest_people_intro.html')
pagedown::chrome_print('forest_people_intro.html')
pagedown::chrome_print('forest_people_intro.html')
pagedown::chrome_print('forest_people_intro.html')
build_pdf("forest_people_intro.html")
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
pagedown::chrome_print('forest_people_intro.Rmd', timeout = 1e6)
pagedown::chrome_print('forest_people_intro.Rmd', timeout = 1e6)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
knitr::include_graphics("img/Vulnerability.jpg")
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
unlink('forest_people_intro_cache', recursive = TRUE)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
unlink('forest_people_intro_cache', recursive = TRUE)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
unlink('forest_people_intro_cache', recursive = TRUE)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
unlink('forest_people_intro_cache', recursive = TRUE)
unlink('forest_people_intro_cache', recursive = TRUE)
pagedown::chrome_print('forest_people_intro.html', timeout = 1e6)
